AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Root Stack Template for a nested stack: Demonstrates how to implement a nested 
  stack.  This template provisions an EC2 web server in a nested stack.   
  **WARNING** This template creates an Amazon EC2 instance. You will be billed
  for the AWS resources used if you create a stack from this template.
Parameters:
  # Parameters for EC2 Nested Stack
  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the web server
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  # Parameters for RDS nested stack
  DBName:
    Default: MyDatabase
    Description: The database name
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBUser:
    NoEcho: 'true'
    Description: The database admin account username
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
  DBPassword:
    NoEcho: 'true'
    Description: The database admin account password
    Type: String
    MinLength: '1'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]+'
    ConstraintDescription: must contain only alphanumeric characters.
  DBAllocatedStorage:
    Default: '5'
    Description: The size of the database (Gb)
    Type: Number
    MinValue: '5'
    MaxValue: '1024'
    ConstraintDescription: must be between 5 and 1024Gb.
  DBInstanceClass:
    Description: The database instance type
    Type: String
    Default: db.t2.small
    AllowedValues: [db.t1.micro, db.m1.small, db.m1.medium, db.m1.large, db.m1.xlarge,
      db.m2.xlarge, db.m2.2xlarge, db.m2.4xlarge, db.m3.medium, db.m3.large, db.m3.xlarge,
      db.m3.2xlarge, db.m4.large, db.m4.xlarge, db.m4.2xlarge, db.m4.4xlarge, db.m4.10xlarge,
      db.r3.large, db.r3.xlarge, db.r3.2xlarge, db.r3.4xlarge, db.r3.8xlarge, db.m2.xlarge,
      db.m2.2xlarge, db.m2.4xlarge, db.cr1.8xlarge, db.t2.micro, db.t2.small, db.t2.medium,
      db.t2.large]
    ConstraintDescription: must select a valid database instance type.
  MultiAZ:
    Description: Multi-AZ master database
    Type: String
    Default: 'false'
    AllowedValues: ['true', 'false']
    ConstraintDescription: must be true or false.
Conditions:
  Is-EC2-VPC: !Or [!Equals [!Ref 'AWS::Region', eu-central-1], !Equals [!Ref 'AWS::Region',
      cn-north-1]]
  Is-EC2-Classic: !Not [{Condition: Is-EC2-VPC}]
Resources:
  EC2Instance:     # this resource is defined in the nested stack
    Type: 'AWS::CloudFormation::Stack'  
    Properties:
      Parameters:    # passing the root parameters above to the nested stack
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
      # get this url from the S3 bucket where your cloudformation templates are uploaded
      TemplateURL: >-
        https://s3.amazonaws.com/cf-templates-8mxauch1fvup-us-east-1/2018274xpZ-cfn-AppName-ec2-web.yaml
  RDSStack:     # this resource is defined in the nested stack
    Type: 'AWS::CloudFormation::Stack'  
    Properties:
      Parameters:    # passing the root parameters above to the nested stack
        DBName: !Ref DBName
        DBUser: !Ref DBUser
        DBPassword: !Ref DBPassword
        DBAllocatedStorage: !Ref DBAllocatedStorage
        DBInstanceClass: !Ref DBInstanceClass
        MultiAZ: !Ref MultiAZ
      # get this url from the S3 bucket where your cloudformation templates are uploaded
      TemplateURL: >-
        https://s3.amazonaws.com/cf-templates-8mxauch1fvup-us-east-1/cfn-AppName-rds-mysql.yaml
  SNSTopic:     # this resource is defined in the nested stack
    Type: 'AWS::CloudFormation::Stack'  
    Properties:
      Parameters:    # passing the root parameters above to the nested stack
        SubscriptionEndPoint: rjgleave@amazon.com
        SubscriptionProtocol: email
      # get this url from the S3 bucket where your cloudformation templates are uploaded
      TemplateURL: >-
        https://s3.amazonaws.com/cf-templates-8mxauch1fvup-us-east-1/20182758VF-cfn-AppName-sns-topic-support.yaml

Outputs:
  # Outputs from EC2 Nested Stack
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !GetAtt EC2Instance.Outputs.InstanceId
  AZ:
    Description: Availability Zone of the newly created EC2 instance
    Value: !GetAtt EC2Instance.Outputs.AZ
  PublicDNS:
    Description: Public DNSName of the newly created EC2 instance
    Value: !GetAtt EC2Instance.Outputs.PublicDNS
  # Outputs from SNS Nested Stack
  TopicARN:
    Description: ARN of newly created SNS Topic
    Value: !GetAtt SNSTopic.Outputs.TopicARN
  QueueName:
    Description: Name of newly created SNS Topic
    Value: !GetAtt SNSTopic.Outputs.QueueName
  # Outputs from RDS Nested Stack
  EC2Platform:
    Description: Platform in which this stack is deployed
    Value: !GetAtt RDSStack.Outputs.EC2Platform
  MasterJDBCConnectionString:
    Description: JDBC connection string for the master database
    Value: !GetAtt RDSStack.Outputs.MasterJDBCConnectionString
  ReplicaJDBCConnectionString:
    Description: JDBC connection string for the replica database
    Value: !GetAtt RDSStack.Outputs.ReplicaJDBCConnectionString